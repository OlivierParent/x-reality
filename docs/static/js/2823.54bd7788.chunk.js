"use strict";(self.webpackChunkx_reality=self.webpackChunkx_reality||[]).push([[2823],{6167:(e,n,t)=>{t.d(n,{A:()=>p});var a=t(7179),r=t(7066),o=t(5819),i=t(4704),l=t(7313),s=t(4110),u=t(1724),c=t(7862),m=t(4662),d=t(6417);const p=e=>{let{children:n}=e;const t=(0,m.p)();return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(o.Xz,{camera:void 0,flat:t.flat,frameloop:t.frameloop,linear:t.linear,orthographic:!1,shadows:t.shadows,children:(0,d.jsxs)(l.Suspense,{children:[(0,d.jsx)(s.z,{}),(0,d.jsx)(u.Z,{}),(0,d.jsx)(c.u,{}),(0,d.jsx)(a.z,{enableDamping:!0,enablePan:!0,enableZoom:!0}),n]})}),(0,d.jsx)(i.Zf,{collapsed:!1,fill:!1,flat:!1,hidden:!1,oneLineLabels:!0,titleBar:!0}),(0,d.jsx)(r.a,{})]})}},9769:(e,n,t)=>{t.r(n),t.d(n,{default:()=>l});var a=t(6417);const r={LENGTH:1,RADIUS:.02,SEGMENTS:32,THICKNESS:.01},o=e=>(0,a.jsxs)("group",{name:"Tripod",...e,children:[(0,a.jsxs)("mesh",{children:[(0,a.jsx)("boxGeometry",{args:[1,1,1].map((e=>1.5*e*r.THICKNESS))}),(0,a.jsx)("meshBasicMaterial",{color:16777215})]}),Array(3).fill(null).map(((e,n)=>(0,a.jsxs)("group",{position:[0,0,0].map(((e,t)=>n===t?r.LENGTH/2+2*r.THICKNESS:e)),children:[(0,a.jsxs)("mesh",{name:"Axis",children:[(0,a.jsx)("boxGeometry",{args:[1,1,1].map(((e,t)=>e*(n===t?r.LENGTH:r.THICKNESS)))}),(0,a.jsx)("meshBasicMaterial",{color:16711680>>8*n})]}),(0,a.jsxs)("mesh",{name:"Point",position:[0,0,0].map(((e,t)=>n===t?r.LENGTH/2+3*r.THICKNESS:e)),children:[(0,a.jsx)("meshBasicMaterial",{color:16777215}),(0,a.jsx)("sphereGeometry",{args:[r.RADIUS,r.SEGMENTS,r.SEGMENTS]})]})]},"axis-".concat(n))))]});var i=t(6167);const l=e=>(0,a.jsx)(i.A,{children:(0,a.jsx)(o,{...e})})},3081:(e,n,t)=>{t.d(n,{P:()=>m});var a=t(7462),r=t(7313),o=t(5825),i=t(9080),l=t(4296),s=t(2362);class u extends o.ShaderMaterial{constructor(){super({uniforms:{depth:{value:null},opacity:{value:1},attenuation:{value:2.5},anglePower:{value:12},spotPosition:{value:new o.Vector3(0,0,0)},lightColor:{value:new o.Color("white")},cameraNear:{value:0},cameraFar:{value:1},resolution:{value:new o.Vector2(0,0)}},transparent:!0,depthWrite:!1,vertexShader:"\n        varying vec3 vNormal;\n        varying float vViewZ;\n        varying float vIntensity;\n        uniform vec3 spotPosition;\n        uniform float attenuation;\n\n        #include <common>\n        #include <logdepthbuf_pars_vertex>\n\n        void main() {\n          // compute intensity\n          vNormal = normalize(normalMatrix * normal);\n          vec4 worldPosition = modelMatrix * vec4(position, 1);\n          vec4 viewPosition = viewMatrix * worldPosition;\n          vViewZ = viewPosition.z;\n\n          vIntensity = 1.0 - saturate(distance(worldPosition.xyz, spotPosition) / attenuation);\n\n          gl_Position = projectionMatrix * viewPosition;\n\n          #include <logdepthbuf_vertex>\n        }\n      ",fragmentShader:"\n        varying vec3 vNormal;\n        varying float vViewZ;\n        varying float vIntensity;\n\n        uniform vec3 lightColor;\n        uniform float anglePower;\n        uniform sampler2D depth;\n        uniform vec2 resolution;\n        uniform float cameraNear;\n        uniform float cameraFar;\n        uniform float opacity;\n\n        #include <packing>\n        #include <logdepthbuf_pars_fragment>\n\n        float readDepth(sampler2D depthSampler, vec2 uv) {\n          float fragCoordZ = texture(depthSampler, uv).r;\n\n          // https://github.com/mrdoob/three.js/issues/23072\n          #ifdef USE_LOGDEPTHBUF\n            float viewZ = 1.0 - exp2(fragCoordZ * log(cameraFar + 1.0) / log(2.0));\n          #else\n            float viewZ = perspectiveDepthToViewZ(fragCoordZ, cameraNear, cameraFar);\n          #endif\n\n          return viewZ;\n        }\n\n        void main() {\n          #include <logdepthbuf_fragment>\n\n          vec3 normal = vec3(vNormal.x, vNormal.y, abs(vNormal.z));\n          float angleIntensity = pow(dot(normal, vec3(0, 0, 1)), anglePower);\n          float intensity = vIntensity * angleIntensity;\n\n          // fades when z is close to sampled depth, meaning the cone is intersecting existing geometry\n          bool isSoft = resolution[0] > 0.0 && resolution[1] > 0.0;\n          if (isSoft) {\n            vec2 uv = gl_FragCoord.xy / resolution;\n            intensity *= smoothstep(0.0, 1.0, vViewZ - readDepth(depth, uv));\n          }\n\n          gl_FragColor = vec4(lightColor, intensity * opacity);\n\n          #include <tonemapping_fragment>\n          #include <".concat(s.i>=154?"colorspace_fragment":"encodings_fragment",">\n        }\n      ")})}}function c(e){let{opacity:n=1,radiusTop:t,radiusBottom:a,depthBuffer:l,color:s="white",distance:c=5,angle:m=.15,attenuation:d=5,anglePower:p=5}=e;const f=r.useRef(null),v=(0,i.A)((e=>e.size)),g=(0,i.A)((e=>e.camera)),h=(0,i.A)((e=>e.viewport.dpr)),[x]=r.useState((()=>new u)),[w]=r.useState((()=>new o.Vector3));t=void 0===t?.1:t,a=void 0===a?7*m:a,(0,i.C)((()=>{x.uniforms.spotPosition.value.copy(f.current.getWorldPosition(w)),f.current.lookAt(f.current.parent.target.getWorldPosition(w))}));const y=r.useMemo((()=>{const e=new o.CylinderGeometry(t,a,c,128,64,!0);return e.applyMatrix4((new o.Matrix4).makeTranslation(0,-c/2,0)),e.applyMatrix4((new o.Matrix4).makeRotationX(-Math.PI/2)),e}),[c,t,a]);return r.createElement(r.Fragment,null,r.createElement("mesh",{ref:f,geometry:y,raycast:()=>null},r.createElement("primitive",{object:x,attach:"material","uniforms-opacity-value":n,"uniforms-lightColor-value":s,"uniforms-attenuation-value":d,"uniforms-anglePower-value":p,"uniforms-depth-value":l,"uniforms-cameraNear-value":g.near,"uniforms-cameraFar-value":g.far,"uniforms-resolution-value":l?[v.width*h,v.height*h]:[0,0]})))}const m=r.forwardRef(((e,n)=>{let{opacity:t=1,radiusTop:o,radiusBottom:i,depthBuffer:s,color:u="white",distance:m=5,angle:d=.15,attenuation:p=5,anglePower:f=5,volumetric:v=!0,debug:g=!1,children:h,...x}=e;const w=r.useRef(null);return r.createElement("group",null,g&&w.current&&r.createElement("spotLightHelper",{args:[w.current]}),r.createElement("spotLight",(0,a.Z)({ref:(0,l.Z)([n,w]),angle:d,color:u,distance:m,castShadow:!0},x),v&&r.createElement(c,{debug:g,opacity:t,radiusTop:o,radiusBottom:i,depthBuffer:s,color:u,distance:m,angle:d,attenuation:p,anglePower:f})),h&&r.cloneElement(h,{spotlightRef:w,debug:g}))}))},5964:(e,n,t)=>{t.d(n,{H:()=>o});var a=t(7313),r=t(9080);function o(e,n){for(var t=arguments.length,o=new Array(t>2?t-2:0),i=2;i<t;i++)o[i-2]=arguments[i];const l=a.useRef(),s=(0,r.A)((e=>e.scene));return a.useLayoutEffect((()=>{let t;if(e&&null!=e&&e.current&&n&&(l.current=t=new n(e.current,...o)),t)return t.traverse((e=>e.raycast=()=>null)),s.add(t),()=>{l.current=void 0,s.remove(t),null==t.dispose||t.dispose()}}),[s,n,e,...o]),(0,r.C)((()=>{var e;null==(e=l.current)||null==e.update||e.update()})),l}},2362:(e,n,t)=>{t.d(n,{i:()=>r});var a=t(5825);const r=(()=>parseInt(a.REVISION.replace(/\D+/g,"")))()}}]);